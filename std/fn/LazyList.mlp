#pragma once

#include <std/fn/Pair.mlp>
#include <std/fn/Optional.mlp>
#include <std/fn/tern.mlp>

var Pair? (left, right):{
    Optional($true, Pair(left, right))
}
var END {
    Optional($false, _)
}

var LazyList {
    var LazyList-1+ _

    var LazyList (xs...):{
        tern($#varargs == 0, END, {
            LazyList-1+(xs...)
        })
    }

    LazyList-1+ := (x, xs...):{
        Pair?(x, LazyList(xs...))
    }

    LazyList
}

-- increasing range from "from" up to "to" included
var LazyRange<= _
LazyRange<= := (from, to):{
    tern(from > to, END, {
        Pair?(from, LazyRange<=(from + 1, to))
    })
}

var subscript (subscriptable, nth):{
    nth >= 1 || ERR("nth should be greater than zero")

    var LazyList::subscript (ll, nth):{
        var subscript_rec _
        subscript_rec := (ll, nth):{
            tern(nth == 1, left(some(ll)), {
                subscript_rec(right(some(ll)), nth - 1)
            })
        }
        subscript_rec(ll, nth)
    }

    var is_lambda (x):{
        Str(x) == "<lambda>"
    }

    !tern(is_lambda(iterable), iterable[#nth], {
        LazyList::subscript(iterable, nth)
    })
}
