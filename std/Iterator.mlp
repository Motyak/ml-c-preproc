#pragma once

#include <std/cond.mlp>
#include <std/loops.mlp>

#include <std/Pair.mlp>
#include <std/Optional.mlp>
#include <std/Stream.mlp>

var Iterator (subscriptable):{
    var Iterator (container):{
        var nth 1
        var next (peek?):{
            tern(nth > len(container), END, {
                var res container[#nth]
                peek? || {nth += 1}
                Optional($true, res)
            })
        }
        next
    }

    var Iterator::fromStream (stream):{
        var next (peek?):{
            tern(none?(stream), END, {
                var res left(some(stream))
                peek? || {
                    stream := right(some(stream))
                }
                Optional($true, res)
            })
        }
        next
    }

    var lambda? (x):{
        var < (lhs, rhs):{
            not(lhs > rhs || lhs == rhs)
        }
        Str(x) == "<lambda>" && len(x) < 8
    }

    !tern(lambda?(subscriptable), Iterator(subscriptable), {
        Iterator::fromStream(subscriptable)
    })
}

var ArgIterator (args...):{
    Iterator(LazyList(args...))
}

var next (iterator):{
    iterator(0)
}
var peek (iterator):{
    iterator(1)
}

package main

print("Iterator.mlp")
