#pragma once

#include <std/fn/ArgIterator.mlp>
#include <std/fn/Optional.mlp>
#include <std/fn/loops.mlp>
#include <std/fn/tern.mlp>

var - {
    var neg (x):{
        x := Int(x)
        x + -2 * x
    }

    var sub (a, b, varargs...):{
        var otherArgs ArgIterator(b, varargs...)

        var lhs a
        var rhs next(otherArgs)
        do_until(():{
            var rhs' some(rhs)
            lhs := lhs + neg(rhs')
            rhs := next(otherArgs)
        }, ():{none?(rhs)})

        lhs
    }

    var - (x, xs...):{
        tern($#varargs == 0, neg(x), {
            sub(x, xs...)
        })
    }

    -
}

package main

-(3)

'---

-(3, 5)
3 - 5

'---

-(1, 2, 3)
1 - 2 - 3
