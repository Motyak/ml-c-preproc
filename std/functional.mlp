#pragma once

#include <std/cond.mlp>
#include <std/loops.mlp>

#include <std/Pair.mlp>
#include <std/Optional.mlp>
#include <std/Stream.mlp>

#include <std/Iterator.mlp>
#include <std/op.mlp>

```
    basically, make a function "pipe-able"..
    ..(with parentheses)

    e.g.: `x |> print()` normally doesn't work
    same for `str |> map(upper)`
    unless they are augmented by curry.
```
var curry_fixed (fixedParams, fn):{
    var remaining {
        tern(fixedParams > len(fn), fixedParams, {
            len(fn) - fixedParams
        })
    }

    var curried _
    curried := (args...):{
        tern($#varargs - len(fn) >= remaining, fn(args...), {
            (args2...):{curried(args..., args2...)}
        })
    }
    curried
}

var curry (fn, args...):{
    curry_fixed(len(fn), fn)(args...)
}

var stdout print

var subscript' {
    var subscript' (nth, subscriptable):{
        subscript(subscriptable, nth)
    }
    curry(subscript')
}

var foreach (OUT subscriptable, fn):{
    var foreach (OUT container, fn):{
        tern(len(container) == 0, container, {
            var nth 1
            until(():{nth > len(container)}, ():{
                fn(&container[#nth])
                nth += 1
            })
            container
        })
    }

    var Stream::foreach (stream, fn):{
        var foreach_rec _
        foreach_rec := (stream, fn):{
            tern(none?(stream), END, {
                fn(left(some(stream)))
                foreach_rec(right(some(stream)), fn)
            })
        }
        foreach_rec(stream, fn)
        stream
    }

    var lambda? (x):{
        Str(x) == "<lambda>" && len(x) < 8
    }

    !tern(lambda?(subscriptable), foreach(&subscriptable, fn), {
        Stream::foreach(subscriptable, fn)
    })
}

var foreach' {
    var foreach' (fn, container):{
        foreach(container, fn)
    }
    curry(foreach')
}

var map {
    var delay (x):{
        var delayed ():{x}
        delayed
    }

    var map (fn, subscriptable):{
        var map (fn, container):{
            var res container
            foreach(1 .. len(res), (nth):{
                res[#nth] := fn(res[#nth])
            })
            res
        }

        var Stream::map _
        Stream::map := (fn, stream):{
            tern(none?(stream), END, {
                var curr fn(left(some(stream)))
                var next delay(Stream::map(fn, right(some(stream))))
                Pair?(curr, next())
            })
        }

        var lambda? (x):{
            Str(x) == "<lambda>" && len(x) < 8
        }

        !tern(lambda?(subscriptable), map(fn, subscriptable), {
            Stream::map(fn, subscriptable)
        })
    }


    curry(map)
}

var filter {
    var delay (x):{
        var delayed ():{x}
        delayed
    }

    var filter (pred, subscriptable):{
        var filter (pred, container):{
            "accepts as input Str or List"
            var list? {
                var list? (x):{
                    var str? {
                        len(Str(x + '!)) == len(Str(x)) + 1
                    }
                    not(str?)
                }
                list?(container)
            }

            var res tern(list?, [], "")
            foreach(1 .. len(container), (nth):{
                pred(container[#nth]) && {
                    !tern(list?, {res += container[#nth]}, {
                        res += [container[#nth]]
                    })
                }
            })
            res
        }

        var Stream::filter _
        Stream::filter := (pred, stream):{
            tern(none?(stream), END, {
                var curr left(some(stream))
                var next delay(Stream::filter(pred, right(some(stream))))
                !tern(pred(curr), next(), {
                    Pair?(curr, next())
                })
            })
        }

        var lambda? (x):{
            Str(x) == "<lambda>" && len(x) < 8
        }

        !tern(lambda?(subscriptable), filter(pred, subscriptable), {
            Stream::filter(pred, subscriptable)
        })
    }

    curry(filter)
}

var reduce {
    var reduce (fn, acc, subscriptable):{
        foreach(subscriptable, (curr):{
            acc := fn(acc, curr)
        })
        acc
    }
    curry(reduce)
}

var compose (fn1, fn2, fns...):{
    var compose (fn1, fn2):{
        fn1
        fn2
        (x):{fn2(fn1(x))}
    }
    reduce(compose, fn1, List(fn2, fns...))
}

var split {
    var split (sep, str):{
        var res []
        var curr ""
        foreach(str, (c):{
            !tern(c == sep, {curr += c}, {
                res += [curr]
                curr := ""
            })
        })
        len(curr) > 0 && {res += [curr]}
        res
    }
    curry(split)
}

var join {
    var join (sep, container):{
        var res ""
        var first_it $true
        foreach(container, (str):{
            first_it || {res += sep}
            res += str
            first_it := $false
        })
        res
    }
    curry(join)
}

package main

"=== testing foreach ==="

var id (x):{
    print("evaluated: " + x)
    x
}

{
    var str "fds"
    var list [1, 2, 3]
    var stream LazyList(1, id(2), 3)

    foreach(&str, (OUT c):{c := 'x})
    print(str)
    var newstr foreach(str, (OUT c):{c := 'y})
    print(str)
    print(newstr)

    foreach(&list, (OUT n):{n := 0})
    print(list)
    var newlist foreach(list, (OUT n):{n := 7})
    print(list)
    print(newlist)

    foreach(stream, (x):{print(x)})
    stream |> foreach'((x):{print(x)})
}

"test curryable foreach"

{
    var ascii (c):{
        Int(Char(c))
    }

    var upper (OUT c):{
        c := Char(c) - (ascii('a) - ascii('A))
    }

    var str "fds"

    print(str |> foreach'(upper))
}

"=== testing filter/reduce on LazyRange ==="

var ERR (msg):{
    print("ERR: " + msg)
    exit(1)
}

var ascii (c):{
    Int(Char(c))
}

var sumOfDigits (n):{
    var <= (a, b):{
        not(a > b)
    }

    n := Str(n)
    var res 0
    foreach(n, (c):{
        ascii('0) <= c && c <= ascii('9) || ERR("not a number")
        res += ascii(c) - ascii('0)
    })
    res
}

-- mod 10 not equal zero
var %10<>0 (n):{
    Str(n)[#-1] <> '0
}

var predicate (n):{
    %10<>0(n) && sumOfDigits(n) < 10
}

var fn (n):{
    n * 11 * 999
}

var seq LazyRange<=(1, 90)
-- foreach(seq, print)

seq := seq |> filter(predicate)
-- foreach(seq, print)

seq := seq |> map(fn)
-- foreach(seq, print)

"=== testing map/filter ==="

{
    var seq [1, 2, 3, 4, 5]
    seq := seq |> map((n):{2 * n})
    seq := seq |> filter((n):{n > 4})
    _ := seq |> foreach'(curry_fixed(1, print))
}

{
    var seq 1 .. 10
    seq := seq |> map((n):{2 * n})
    seq := seq |> filter((n):{n > 4})
    _ := seq |> foreach'(curry_fixed(1, print))
}

"=== testing reduce ==="

reduce(+, 0, [1, 2, 3]) |> stdout
reduce(+, 'T, "ommy") |> stdout

1 .. 5 |> reduce(+, 0) |> stdout

var ab'cd'ef [14, 28, 57]
var abc'def [142, 857]

print('ab'cd'ef, ab'cd'ef, ab'cd'ef |> reduce(+, 0))
print('abc'def, abc'def, abc'def |> reduce(+, 0))

var range2str (range):{
    reduce(+, "", range)
}
['0 .. '9, 'a .. 'z] |> map(range2str) |> reduce(+, "") |> stdout

"=== testing split/join ==="

var upper (OUT c):{
    var ascii (c):{
        Int(Char(c))
    }
    tern(ascii(c) <= ascii('Z), c, {
        var local_c Char(c)
        local_c -= ascii('a) - ascii('A)
        c := local_c
        local_c
    })
}

"hello" |> map(upper) |> stdout
"fds" |> join(",") |> stdout
[1, 2, 3] |> join(" ") |> stdout

"abc fds 123" |> split(" ") |> stdout

"f,d,s" |> split(",") |> map(upper) |> join("_") |> stdout

"=== testing compose ==="

var increment (x):{x + 1}
var double (x):{x * 2}
var inc_then_double compose(increment, double, double)

inc_then_double(10) |> stdout
